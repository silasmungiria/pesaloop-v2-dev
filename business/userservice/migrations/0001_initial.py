# Generated by Django 5.2.4 on 2025-07-23 15:50

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import userservice.models.customer.customer
import userservice.models.user.user_manager
import userservice.services.user.account_number_generator
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique system-wide identifier for the user.', primary_key=True, serialize=False, unique=True)),
                ('account_number', models.CharField(default=userservice.services.user.account_number_generator.AccountNumberGenerator.generate, help_text='Unique account number assigned to the user.', max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^\\d{10,20}$')])),
                ('first_name', models.CharField(help_text="User's first name.", max_length=255)),
                ('last_name', models.CharField(help_text="User's last name.", max_length=255)),
                ('email', models.EmailField(help_text='A unique and valid email address.', max_length=254, unique=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', 'Enter a valid email address.')])),
                ('phone_number', models.CharField(help_text='A unique phone number in E.164 international format (e.g., +2547...).', max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^\\+[1-9]\\d{1,14}$', 'Enter a valid international phone number (E.164 format).')])),
                ('country_code', models.CharField(blank=True, help_text='ISO or custom country code for localization.', max_length=5, null=True)),
                ('password', models.CharField(help_text='Hashed user password.', max_length=255)),
                ('password_reset_count', models.IntegerField(default=0, help_text='Number of times the user has reset their password.')),
                ('last_password_reset', models.DateTimeField(blank=True, help_text='Timestamp of the last password reset.', null=True)),
                ('biometric_auth_enabled', models.BooleanField(default=False, help_text='Indicates if biometric authentication is enabled.')),
                ('biometric_option_chosen', models.BooleanField(default=False, help_text='Indicates if the user has chosen biometric login.')),
                ('is_loan_qualified', models.BooleanField(default=False, help_text='Indicates if the user is qualified to access loan products.')),
                ('verified_email', models.BooleanField(default=False, help_text="Indicates if the user's email is verified.")),
                ('verified_phone_number', models.BooleanField(default=False, help_text="Indicates if the user's phone number is verified.")),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active.')),
                ('is_verified', models.BooleanField(default=False, help_text='Indicates if the user has passed verification/KYC.')),
                ('is_deleted', models.BooleanField(default=False, help_text='Marks whether the user is soft-deleted from the system.')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the user was soft-deleted.', null=True)),
                ('use_sms', models.BooleanField(default=False, help_text="User's preference for receiving notifications via SMS or Email.")),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['-date_joined'],
                'default_permissions': (),
                'indexes': [models.Index(fields=['email', 'phone_number', 'is_active', 'is_deleted'], name='users_email_8e1249_idx')],
            },
            managers=[
                ('objects', userservice.models.user.user_manager.userManager()),
            ],
        ),
        migrations.CreateModel(
            name='Merchant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('business_name', models.CharField(max_length=255)),
                ('business_address', models.TextField()),
                ('business_registration_number', models.CharField(max_length=100)),
                ('bank_account_number', models.CharField(max_length=50)),
                ('bank_code', models.CharField(max_length=10)),
                ('settlement_schedule', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='weekly', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='merchant_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Merchant',
                'verbose_name_plural': 'Merchants',
                'db_table': 'merchant',
                'ordering': ['business_name'],
            },
        ),
        migrations.CreateModel(
            name='ActivityTrail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip', models.GenericIPAddressField()),
                ('internet_service_provider', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('timezone', models.CharField(blank=True, max_length=100, null=True)),
                ('endpoint', models.TextField()),
                ('user_agent', models.TextField()),
                ('request_params', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Activity Trail',
                'verbose_name_plural': 'Activity Trails',
                'db_table': 'activity_trail',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['ip', 'timestamp'], name='activity_tr_ip_38e06f_idx'), models.Index(fields=['user', 'timestamp'], name='activity_tr_user_id_71b258_idx'), models.Index(fields=['endpoint', 'timestamp'], name='activity_tr_endpoin_856543_idx')],
            },
        ),
    ]
